<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization of Puzzle and Grid

randomize();

// Declaration of puzzle solution
// Go per column from top to bottom

puzzleArray[0, 0] = irandom(1);
puzzleArray[0, 1] = irandom(1);
puzzleArray[0, 2] = irandom(1);
puzzleArray[0, 3] = irandom(1);
puzzleArray[0, 4] = irandom(1);
puzzleArray[0, 5] = irandom(1);
puzzleArray[0, 6] = irandom(1);
puzzleArray[1, 0] = irandom(1);
puzzleArray[1, 1] = irandom(1);
puzzleArray[1, 2] = irandom(1);
puzzleArray[1, 3] = irandom(1);
puzzleArray[1, 4] = irandom(1);
puzzleArray[1, 5] = irandom(1);
puzzleArray[1, 6] = irandom(1);
puzzleArray[2, 0] = irandom(1);
puzzleArray[2, 1] = irandom(1);
puzzleArray[2, 2] = irandom(1);
puzzleArray[2, 3] = irandom(1);
puzzleArray[2, 4] = irandom(1);
puzzleArray[2, 5] = irandom(1);
puzzleArray[2, 6] = irandom(1);
puzzleArray[3, 0] = irandom(1);
puzzleArray[3, 1] = irandom(1);
puzzleArray[3, 2] = irandom(1);
puzzleArray[3, 3] = irandom(1);
puzzleArray[3, 4] = irandom(1);
puzzleArray[3, 5] = irandom(1);
puzzleArray[3, 6] = irandom(1);
puzzleArray[4, 0] = irandom(1);
puzzleArray[4, 1] = irandom(1);
puzzleArray[4, 2] = irandom(1);
puzzleArray[4, 3] = irandom(1);
puzzleArray[4, 4] = irandom(1);
puzzleArray[4, 5] = irandom(1);
puzzleArray[4, 6] = irandom(1);
puzzleArray[5, 0] = irandom(1);
puzzleArray[5, 1] = irandom(1);
puzzleArray[5, 2] = irandom(1);
puzzleArray[5, 3] = irandom(1);
puzzleArray[5, 4] = irandom(1);
puzzleArray[5, 5] = irandom(1);
puzzleArray[5, 6] = irandom(1);
puzzleArray[6, 0] = irandom(1);
puzzleArray[6, 1] = irandom(1);
puzzleArray[6, 2] = irandom(1);
puzzleArray[6, 3] = irandom(1);
puzzleArray[6, 4] = irandom(1);
puzzleArray[6, 5] = irandom(1);
puzzleArray[6, 6] = irandom(1);

// If you decide to alter the size of the square sprites, change the following value
spriteSize = 64; // Width/height of square in pixels

/*
For puzzle creation, do not modify anything below this comment
You simply need to input the layout of the arrays (note, must be a square) where
0 is an empty square and 1 is a filled square.
*/

// Pulls the array dimensions
puzzleHeight = array_length_1d(puzzleArray);
puzzleWidth = array_length_2d(puzzleArray, 0);

// Used to modify arrays since arrays start at 0
puzzleArrayHeight = puzzleHeight - 1;
puzzleArrayWidth = puzzleWidth - 1;

// Simply multiplies array dimensions to output puzzle size
puzzleSize = puzzleHeight*puzzleWidth;

// Grid creation by looping through each separate array dimension
for (i = puzzleArrayHeight; i &gt;= 0; i--){
    for (j = puzzleArrayWidth; j &gt;= 0; j--){
        instance_create(x+i*spriteSize, y+j*spriteSize, obj_grid);
    }
}

// Vertical/Horizontal Spacing between hints
numberSpacing = 64;

// Completed Puzzles Counter
global.completedPuzzles = 0;

// Puzzle Completion Status (true = completed, false = incomplete), handles background tasks
backgroundStatus = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Answer Display
/*
if (keyboard_check_pressed(vk_down)){
    // Puzzle Answer Generation
    for (i = puzzleArrayHeight; i &gt;= 0; i--){
        for (j = puzzleArrayWidth; j&gt;= 0; j--){
            if (puzzleArray[i, j] == 0){
                instance_create(x+i*spriteSize, y+j*spriteSize, obj_square);
            }
            else if (puzzleArray[i, j] == 1){
                instance_create(x+i*spriteSize, y+j*spriteSize, obj_squareFilled);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Answer Check

status = true;

for (i = puzzleArrayHeight; i &gt;= 0; i--){
    for (j = puzzleArrayWidth; j&gt;= 0; j--){
        if (puzzleArray[i, j] == 0){
            if (instance_position(x+i*spriteSize, y+j*spriteSize, obj_squareFilled)){
                status = false;
            }
        }
        if (puzzleArray[i, j] == 1){
            if (instance_position(x+i*spriteSize, y+j*spriteSize, obj_grid)){
                status = false;
            }
            if (instance_position(x+i*spriteSize, y+j*spriteSize, obj_cross)){
                status = false
            }
        }
    }
}

if (status == true &amp;&amp; backgroundStatus == false){
    instance_create(900, 300, obj_levelComplete);
    global.completedPuzzles++;
    backgroundStatus = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keybinds

// Randomly create a new puzzle

if (keyboard_check_pressed(ord('R'))){
    // Generate new puzzle
    puzzleArray[0, 0] = irandom(1);
    puzzleArray[0, 1] = irandom(1);
    puzzleArray[0, 2] = irandom(1);
    puzzleArray[0, 3] = irandom(1);
    puzzleArray[0, 4] = irandom(1);
    puzzleArray[1, 0] = irandom(1);
    puzzleArray[1, 1] = irandom(1);
    puzzleArray[1, 2] = irandom(1);
    puzzleArray[1, 3] = irandom(1);
    puzzleArray[1, 4] = irandom(1);
    puzzleArray[2, 0] = irandom(1);
    puzzleArray[2, 1] = irandom(1);
    puzzleArray[2, 2] = irandom(1);
    puzzleArray[2, 3] = irandom(1);
    puzzleArray[2, 4] = irandom(1);
    puzzleArray[3, 0] = irandom(1);
    puzzleArray[3, 1] = irandom(1);
    puzzleArray[3, 2] = irandom(1);
    puzzleArray[3, 3] = irandom(1);
    puzzleArray[3, 4] = irandom(1);
    puzzleArray[4, 0] = irandom(1);
    puzzleArray[4, 1] = irandom(1);
    puzzleArray[4, 2] = irandom(1);
    puzzleArray[4, 3] = irandom(1);
    puzzleArray[4, 4] = irandom(1);
    
    // Reset board
    with (obj_squareFilled){
        instance_change(obj_grid, false);
    }
    with (obj_cross){
        instance_change(obj_grid, false);
    }
    with(obj_levelComplete){
        instance_destroy();
    }
    backgroundStatus = false;
    show_debug_message("NEW PUZZLE");
}

if (keyboard_check_pressed(ord('C'))){
    with (obj_squareFilled){
        instance_change(obj_grid, false);
    }
    with (obj_cross){
        instance_change(obj_grid, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Column Hints

for (i = puzzleArrayHeight; i &gt;= 0; i--){
    var k = 0;
    var numberOfHints = 1;
    for (j = puzzleArrayWidth; j &gt;= 0; j--){
        if (puzzleArray[i, j] == 1){
            k++;
        }
        else if (puzzleArray[i, j] == 0){
            if (k &gt; 0){
                draw_text(x + numberSpacing*i, y - 30 - 32*numberOfHints, k);
                numberOfHints++;
                k = 0;
            }
        }
        // If script is about to reset for loop, ensure there is a numeric output
        if (j == 0){
            if (puzzleArray[i, j] == 1){
                draw_text(x + numberSpacing*i, y - 30 - 32*numberOfHints, k);
            }
        }
    }
}

// Row Hints

for (i = puzzleArrayHeight; i &gt;= 0; i--){
    var k = 0;
    var numberOfHints = 1;
    for (j = puzzleArrayWidth; j &gt;= 0; j--){
        if (puzzleArray[j, i] == 1){
            k++;
        }
        else if (puzzleArray[j, i] == 0){
            if (k &gt; 0){
                draw_text(x - 30 - 32*numberOfHints, y + numberSpacing*i, k);
                numberOfHints++;
                k = 0;
            }
        }
        // If script is about to reset for loop, ensure there is a numeric output
        if (j == 0){
            if (puzzleArray[j, i] == 1){
                draw_text(x - 30 - 32*numberOfHints, y + numberSpacing*i, k);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
